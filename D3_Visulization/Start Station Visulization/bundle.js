(function (React$1, ReactDOM, d3, ReactDropdown) {
  'use strict';

  var React$1__default = 'default' in React$1 ? React$1['default'] : React$1;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;
  ReactDropdown = ReactDropdown && Object.prototype.hasOwnProperty.call(ReactDropdown, 'default') ? ReactDropdown['default'] : ReactDropdown;

  //const csvUrl = 'https://gist.githubusercontent.com/Samic25/89e36e8fe4cf3526365b3dbc2daed5bd/raw/gistfile1.txt';
  const csvUrl = 'https://gist.githubusercontent.com/Samic25/decdad28c4a4c8a1ad795dd1eb779c85/raw/startstation.txt';
  const useData = () => {
    const [data, setData] = React$1.useState(null);

    React$1.useEffect(() => {
      const row = d => {
       d.count = +d.count;
        return d;
      };
      
      d3.csv(csvUrl, row).then(setData);
    }, []);
    
    //return data ? data.filter(d => d.IngredientCount != 0) : null;
    return data;
  };

  const AxisBottom = ({ xScale, innerHeight, tickFormat }) =>
    xScale.ticks().map(tickValue => (
      React.createElement( 'g', { className: "tick", key: tickValue, transform: `translate(${xScale(tickValue)},0)` },
        React.createElement( 'line', { y2: innerHeight }),
        React.createElement( 'text', { style: { textAnchor: 'middle' }, dy: ".71em", y: innerHeight + 3 },
          tickFormat(tickValue)
        )
      )
    ));

  const AxisLeft = ({ yScale }) =>
    yScale.domain().map(tickValue => (
      React.createElement( 'g', { className: "tick" },
        React.createElement( 'text', {
          key: tickValue, style: { textAnchor: 'end' }, x: -3, dy: ".32em", y: yScale(tickValue) + yScale.bandwidth() / 2 },
          tickValue
        )
      )
    ));

  const Marks = ({
    data,
    xScale,
    yScale,
    xValue,
    yValue,
    tooltipFormat
  }) =>
    data.map(d => (
      React.createElement( 'rect', {
        className: "mark", key: yValue(d), x: 0, y: yScale(yValue(d)), width: xScale(xValue(d)), height: yScale.bandwidth() },
        React.createElement( 'title', null, tooltipFormat(xValue(d)) )
      )
    ));

  const width = 960;
  const menuHeight = 80;
  const height = 500 - menuHeight;
  const margin = { top: 20, right: 30, bottom: 65, left: 280};
  const xAxisLabelOffset = 50;

  const siFormat = d3.format('.2s');
  const xAxisTickFormat = tickValue => tickValue; // siFormat(tickValue).replace('G', 'B');
  const types = ['casual', 'member'];
  //const quarters = ['1', '2', '3', '4'];
  //const year = ['2021','2022'];
  const App = () => {
    const data = useData();
    const [userType, setUserType] = React$1.useState(types[0]);
    //const [quarter, setQuarter] = useState(quarters[0]);
    //const [yearType, setYear] = useState(year[0]);

    //const initialXAttribute = null;
    //const [xAttribute, setXAttribute] = useState(initialXAttribute);
    const xValue = d => d['count'];
    const yValue = d => d['start_station_name'];
    //const xAxisLabel = getLabel(xAttribute);

    if (!data) {
      return React$1__default.createElement( 'pre', null, "Loading..." );
    }
    
  const innerHeight = height - margin.top - margin.bottom;
  const innerWidth = width - margin.left - margin.right;  

    const filteredData = data.filter(d => d.member_casual === userType).slice(0,10);

    console.log(filteredData);
    
    const yScale = d3.scaleBand()
      .domain(filteredData.map(yValue))
      .range([0, innerHeight])
      .paddingInner(0.15);

    const xScale = d3.scaleLinear()
      .domain([0, d3.max(filteredData, xValue)])
      .range([0, innerWidth]);
    
  console.log("xScale: ", xScale);
   return (
      React$1__default.createElement( React$1__default.Fragment, null,
        React$1__default.createElement( 'div', { className: "menus-container" },
          React$1__default.createElement( 'span', { className: "dropdown-label" }, "Member Type"),
          React$1__default.createElement( ReactDropdown, {
            options: types, value: userType, onChange: ({ value }) => setUserType(value) })
        ),
    React$1__default.createElement( 'svg', { width: width, height: height },
        React$1__default.createElement( 'g', { transform: `translate(${margin.left},${margin.top})` },
          React$1__default.createElement( AxisBottom, {
            xScale: xScale, innerHeight: innerHeight, tickFormat: xAxisTickFormat }),
          React$1__default.createElement( AxisLeft, { yScale: yScale }),
          React$1__default.createElement( 'text', {
            className: "axis-label", x: innerWidth / 2, y: innerHeight + xAxisLabelOffset, textAnchor: "middle" }, "Number of Rides"),
          React$1__default.createElement( Marks, {
            data: filteredData, xScale: xScale, yScale: yScale, xValue: xValue, yValue: yValue, tooltipFormat: xAxisTickFormat })
        )
      )
      )
    );
    };
  const rootElement = document.getElementById('root');
  ReactDOM.render(React$1__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3, ReactDropdown));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,